#==============================================================================
# Copyright (C) 2020-present Alces Flight Ltd.
#
# This file is part of ActionContent.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# ActionContent is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with ActionContent. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on ActionContent, please visit:
# https://github.com/openflighthpc/action-content
#==============================================================================

# The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
# NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
# "MAY", and "OPTIONAL" in this document are to be interpreted as
# described in BCP 14 [RFC2119] [RFC8174] when, and only when, they
# appear in all capitals, as shown here.

__meta__:
  aws_vars: &aws_vars
    variables: [ec2_id, region]

# NOTE: DEVELOPERS ONLY!
# All implementations of the status command MUST output one of the following
# including the single new line character and set the status code
# * "on\n" and exit 0 - The node is currently running
# * "off\n" and exit 0 - The node is currently offline
# * "unknown\n" and exit 1 - The node' status is undetermined
status:
  help:
    summary: Check if the node is running
  default:
    script: echo unknown; exit 1
  aws:
    <<: *aws_vars
    script: |
      status=$(aws ec2 describe-instances --instance-ids "$ec2_id" \
                                          --region "$region" \
                                          --query Reservations[0].Instances[0].State.Name)
      case "$status" in
        \"running\")
          echo on
          exit 0
          ;;
        \"stopped\")
          echo off
          exit 0
          ;;
        *)
          echo unknown
          exit 1
          ;;
      esac
  azure:
    script: echo unknown; exit 1
  ipmi:
    script: echo unknown; exit 1

# NOTE: DEVELOPERS ONLY!
# All implementations of the on command MUST output one of the following
# including the single new line character and set the status code
# * "starting\n" and exit 0 - If the command successfully "started" turning on
# * "unknown\n" and exit 1 - All other conditions
#
# The above status codes are subject to the following observations:
# * The 'starting' status SHOULD be returned if there is a reasonable
#   suspicion the node will boot successfully.
# * The 'starting' status MAY be returned before the node has successfully
#   booted if waiting/ confirming the state is not feasible.
# * The 'unknown' status SHOULD be returned if there is reasonable suspicion
#   the boot will fail.
# * The 'unknown' status SHOULD be returned if the node is already on
# * The 'starting' exit code MAY be returned if determining the initial state
#   of the node is not feasible.
# * The command MUST NOT reboot the node if it is already on
# * Each implementation SHOULD be deterministic
'on':
  help:
    summary: Initiate the boot process for a node or nodes
    description: >
      Starts the boot process for a node or nodes. This command will initiate
      the boot process but should not be used determine if the node turned on.

      The response is indeterminable if the node is already on. Regardless of
      the response status, this command will not preform a reboot. Please use
      the 'status' command to determine if a node is on.
  default:
    script: echo unknown; exit 1
  aws:
    <<: *aws_vars
    # NOTE: It is possible to parse the response from the aws command to
    # determine if the node was already running. However this either requires
    # a nasty ruby command or a dependency on jq.
    #
    # Checking the exit status with $? can not distinguish between the two,
    # but it simplifies the command. Revisit as necessary
    script: |
      aws ec2 start-instances --instance-ids "$ec2_id" --region "$region" >/dev/null 2>&1
      if [ $? ] ; then
        echo starting
        exit 0
      else
        echo unknown
        exit 1
      fi
  azure:
    script: |
      echo Implement AZURE power on
      exit 255
  ipmi:
    script: |
      echo Implment IPMI power on
      exit 255

# NOTE: DEVELOPERS ONLY!
# All implementations of the on command MUST output one of the following
# including the single new line character and set the status code
# * "stopping\n" and exit 0 - If the command successfully initiate a shutdown
# * "unknown\n" and exit 1 - All other conditions
#
# The above status codes are subject to the following observations:
# * The 'stopping' status SHOULD be returned if there is a reasonable
#   suspicion the node will shutdown regardless of means
#   This includes but is not limited to graceful or abrupt shutdowns
# * The 'stopping' status MAY be returned before the node has
#   shutdown if waiting/ confirming the state is not feasible.
# * The 'unknown' status SHOULD be returned if the node is already off
# * The 'stopping' exit code MAY be returned if determining the initial state
#   of the node is not feasible.
# * Each implementation SHOULD be deterministic
'off':
  help:
    summary: Initiate the shutdown process for a node or nodes
    description: >
      Starts the shutdown process for a node or nodes. This command will initiate
      the shutdown process but must not be used to determine if a node is off.

      The response is indeterminable if the node is already off. Please use
      the 'status' command to determine if a node is off.
  default:
    script: echo unknown; exit 1
  aws:
    <<: *aws_vars
    # NOTE: Similarly to the aws on command, it is possible to determine if the node
    # was already running by parsing the JSON response. Revisit as required
    script: |
      aws ec2 stop-instances --instance-ids "$ec2_id" --region "$region" >/dev/null 2>&1
      if [ $? ] ; then
        echo stopping
        exit 0
      else
        echo unknown
        exit 1
      fi
  azure:
    script: |
      echo Implement AZURE power off
      exit 255
  ipmi:
    script: |
      echo Implment IPMI power off
      exit 255

reboot:
  help:
    summary: Turn the node(s) reboot
    description: >
      Starts the shutdown process for a node or nodes. This command may only initiate
      the shutdown without checking it completes successfully.
  default:
    script: |
      echo Not Supported
      exit 255
  aws:
    <<: *aws_vars
    script: |
      echo Implement AWS power reboot
      exit 255
  azure:
    script: |
      echo Implement AZURE power reboot
      exit 255
  ipmi:
    script: |
      echo Implment IPMI power reboot
      exit 255

