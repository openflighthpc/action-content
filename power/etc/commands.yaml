#==============================================================================
# Copyright (C) 2020-present Alces Flight Ltd.
#
# This file is part of ActionContent.
#
# This program and the accompanying materials are made available under
# the terms of the Eclipse Public License 2.0 which is available at
# <https://www.eclipse.org/legal/epl-2.0>, or alternative license
# terms made available by Alces Flight Ltd - please direct inquiries
# about licensing to licensing@alces-flight.com.
#
# ActionContent is distributed in the hope that it will be useful, but
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR
# IMPLIED INCLUDING, WITHOUT LIMITATION, ANY WARRANTIES OR CONDITIONS
# OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A
# PARTICULAR PURPOSE. See the Eclipse Public License 2.0 for more
# details.
#
# You should have received a copy of the Eclipse Public License 2.0
# along with ActionContent. If not, see:
#
#  https://opensource.org/licenses/EPL-2.0
#
# For more information on ActionContent, please visit:
# https://github.com/openflighthpc/action-content
#==============================================================================

__meta__:
  aws_vars: &aws_vars
    variables: [ec2_id, region]

# NOTE: DEVELOPERS ONLY!
# All implementations of the status command must output one of the following
# including the single new line character and set the status code
# * "on\n" and exit 0 - The node is currently running
# * "off\n" and exit 0 - The node is currently offline
# * "unknown\n" and exit 1 - The node' status is undetermined
status:
  help:
    summary: Check if the node is running
  default:
    script: echo unknown; exit 1
  aws:
    <<: *aws_vars
    script: |
      status=$(aws ec2 describe-instances --instance-ids "$ec2_id" \
                                          --region "$region" \
                                          --query Reservations[0].Instances[0].State.Name)
      case "$status" in
        \"running\")
          echo on
          exit 0
          ;;
        \"stopped\")
          echo off
          exit 0
          ;;
        *)
          echo unknown
          exit 1
          ;;
      esac
  azure:
    script: echo unknown; exit 1
  ipmi:
    script: echo unknown; exit 1

'on':
  help:
    summary: Turn the node(s) on
    description: >
      Starts the boot process for a node or nodes. This command may only initiate
      the boot without checking it completes successfully.
  default:
    script: |
      echo Not Supported
      exit 1
  aws:
    <<: *aws_vars
    script: |
      echo Implement AWS power on
      exit 1
  azure:
    script: |
      echo Implement AZURE power on
      exit 1
  ipmi:
    script: |
      echo Implment IPMI power on
      exit 1

'off':
  help:
    summary: Turn the node(s) off
    description: >
      Starts the shutdown process for a node or nodes. This command may only initiate
      the shutdown without checking it completes successfully.
  default:
    script: |
      echo Not Supported
      exit 1
  aws:
    <<: *aws_vars
    script: |
      echo Implement AWS power off
      exit 1
  azure:
    script: |
      echo Implement AZURE power off
      exit 1
  ipmi:
    script: |
      echo Implment IPMI power off
      exit 1

reboot:
  help:
    summary: Turn the node(s) reboot
    description: >
      Starts the shutdown process for a node or nodes. This command may only initiate
      the shutdown without checking it completes successfully.
  default:
    script: |
      echo Not Supported
      exit 1
  aws:
    <<: *aws_vars
    script: |
      echo Implement AWS power reboot
      exit 1
  azure:
    script: |
      echo Implement AZURE power reboot
      exit 1
  ipmi:
    script: |
      echo Implment IPMI power reboot
      exit 1

